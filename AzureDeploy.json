{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0", 
  "parameters": {
      "alertName": {
          "type": "string",
          "defaultValue": "[concat(parameters('LAworkspaceName'), '/', 'IISCertExpireAlert')]",
          "metadata": {
              "description": "Name of your alert"
          }
        }, 
      "alertDescription": {
          "type": "string",
          "defaultValue": "Alert for IIS certificates approaching expiration",
          "metadata": {
              "description": "Description of your Alert"
          }
        },
      "actionGroup": {
          "type": "string",
          "metadata": {
            "description": "Action Group that your alert will use"
          }
        },
      "alertStatus": {
          "type": "bool",
          "defaultValue": "true"
        },
      "LAworkspaceName": {
          "type": "string",
          "strongtype": "omsWorkspace",
          "metadata": {
            "description": "Workspace that you want to collect the IIS logs and alert from"
            }
        }
    },       
  "variables": {
    "alertSource":{
        "Query":"Event | where EventLog == \"Microsoft-Windows-CertificateServicesClient-Lifecycle-System/Operational\"' | where EventID == 1003 | parse EventData with * \"<NotValidAfter>\" CertExpDate:datetime \"<\" * | project Computer, EventLevelName, RenderedDescription, CertExpDate, TimeGenerated",
        "SourceId": "[resourceId('Microsoft.OperationalInsights/workspaces/', parameters('LAworkspaceName'))]",
        "Type":"ResultCount"
        },
    "alertTag": "[concat('hidden-link:', variables('alertSource').SourceId)]",
    "alertSchedule":{
        "Frequency": 15,
        "Time": 60
        },
    "alertActions":{
        "SeverityLevel": "4",
        "SuppressTimeinMin": 20
        },
        "alertTrigger":{
        "Operator":"GreaterThan",
        "Threshold":"1"
        }
},
"resources":[
    {
    "apiVersion": "2017-05-10",
    "name": "[concat(parameters('LAworkspaceName'), '/CollectIISCertLog')]",
    "type": "Microsoft.Resources/deployments",
    "properties": {
        "mode": "Incremental",
        "template": {
            "name": "[concat('Microsoft.OperationalInsights/workspaces/', parameters('LAworkspaceName'))]",
            "type": "Microsoft.OperationalInsights/workspaces/datasources",
            "apiVersion": "2015-11-01-preview",
            "kind": "WindowsEvent",
            "properties": {                
                "eventLogName": "Microsoft-Windows-CertificateServicesClient-Lifecycle-System/Operational",
                "eventTypes": [
                    {
                        "eventType": "Error"
                    },
                    {
                        "eventType": "Warning"
                    },
                    {
                        "eventType": "Information"
                    }
                    ]
                }
            }
        }
    },
    {
    "name":"[parameters('alertName')]",
    "type":"Microsoft.Insights/scheduledQueryRules",
    "apiVersion": "2018-04-16",
    "location": "[reference(concat('Microsoft.OperationalInsights/workspaces/', parameters('LAworkspaceName')), '2015-11-01-preview').location]", 
    "tags":{"[variables('alertTag')]": "Resource"},
    "properties":{
        "description": "[parameters('alertDescription')]",
        "enabled": "[parameters('alertStatus')]",
        "source": {
            "query": "[variables('alertSource').Query]",
            "dataSourceId": "[variables('alertSource').SourceId]",
            "queryType":"[variables('alertSource').Type]"
        },
        "schedule":{
            "frequencyInMinutes": "[variables('alertSchedule').Frequency]",
            "timeWindowInMinutes": "[variables('alertSchedule').Time]"
        },
        "action":{
            "odata.type": "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction",
            "severity":"[variables('alertActions').SeverityLevel]",
            "throttlingInMin": "[variables('alertActions').SuppressTimeinMin]",
            "aznsAction":{
                "actionGroup": "[array(parameters('actionGroup').ActionGroup)]",
                "emailSubject":"[parameters('actionGroup').Subject]",
                "customWebhookPayload":"[parameters('actionGroup').Webhook]"
            },
        "trigger":{
                "thresholdOperator":"[variables('alertTrigger').Operator]",
                "threshold":"[variables('alertTrigger').Threshold]"
            }
        }
    }
  }
]
}